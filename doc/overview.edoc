%%==============================================================================
%% Copyright 2012 Benoît Chesneau
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%% http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%==============================================================================


@copyright 2012 Benoît Chesneau.
@version 0.1
@title hackney - simple HTTP client in Erlang

@doc

# hackney

**hackney** is a simple HTTP client.

Main features:

- no message passing: response is directly streamed to the current
  process and a state is kept in a `#client{}' record.
- Keepalive handling
- basic authentication
- stream the response
- Can send files using the sendfile API
- Chunked encoding support
- Used parse transform for shorcut methods calls:

ex:

```
hackney:get("https://friendpaste.com")
'''

hackney is based on some code from
[cowboy](http://github.com/extend/cownboy) for the HTTP parsing. This is
a work in progress, see the
[TODO](http://github.com/benoitc/hackney/blob/master/TODO.md) for more
informations on what still need to be done.

## Examples


Quick usage example without pool:


```
application:start(crypto),
application:start(public_key),
application:start(ssl),

%% make a simple connection
{ok, _, _, Client} = hackney:request(<<"https://friendpaste.com">>),
{ok, Body, Client1} = hackney:body(Client),

io:format("body: ~p~n~n", [Body]),

%% connection is kept alive, launch a new request
{ok, _, _, Client2} = hackney:send_request(Client1, {get,
                                                     <<"/_all_languages">>,
                                                     [],
                                                     <<>>}),
{ok, Body1, Client3} = hackney:body(Client2),
io:format("body: ~p~n~n", [Body1]),

%% do the same but with a post. Create a paste
ReqBody = << "{
     \"id\": \"some_paste_id\",
     \"rev\": \"some_revision_id\",
     \"changeset\": \"changeset in unidiff format\"
}" >>,

ReqHeaders = [{<<"Content-Type">>, <<"application/json">>}],
{ok, _, _, Client4} = hackney:send_request(Client3, {post, <<"/">>,
                                                     ReqHeaders,
                                                     ReqBody}),
{ok, Body2, Client5} = hackney:body(Client4),
io:format("body: ~p~n~n", [Body2]),

%% same as above but using a dile
ReqBody1 = {file, "./examples/test.json"},
{ok, _, _, Client6} = hackney:send_request(Client5, {post, <<"/">>,
                                                     ReqHeaders,
                                                     ReqBody1}),
{ok, Body3, Client7} = hackney:body(Client6),
io:format("body: ~p~n~n", [Body3]),

%% finally close the client (close the socket)
hackney:close(Client7).
'''


Contribute
----------
For issues, comments or feedback please [create an issue!] [1]

[1]: http://github.com/benoitc/hackney/issues "hackney issues"

@end
